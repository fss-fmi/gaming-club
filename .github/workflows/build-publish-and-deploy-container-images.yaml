name: 'Build, Publish, and Deploy container images'

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  build-and-publish-container-images:
    name: 'Build and Publish container images'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to the Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Dependencies
        run: pnpm install

      - name: Get API environment files
        run: |
          curl -H "Authorization: token ${TOKEN}" https://raw.githubusercontent.com/fss-fmi/secrets/main/sugaming/.env.preview > .env
          curl -H "Authorization: token ${TOKEN}" https://raw.githubusercontent.com/fss-fmi/secrets/main/sugaming/apps/sugaming-api/.env.preview > ./apps/sugaming-api/.env
        env:
          TOKEN: ${{ secrets.FSS_FMI_GITHUB_TOKEN }}

      - name: Build images
        run: INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} npx nx run-many --target=container --push

  deploy-container-images:
    name: 'Deploy ${{ matrix.NAME }} container image'
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets[matrix.NAME] }}

    strategy:
      matrix:
        include:
          - NAME: 'sugaming-api'
          - NAME: 'sugaming-discord'

    steps:
      - name: Set image tag environment variable
        run: |
          # If the deployment is started by:
          #  - a pull requst -> set the image tag to be "pr-{PR_ID}"
          #  - a push to main -> set the image tag to be "main"
          #  - a push of a version tag -> set the image tag to be "latest"
          if [ -n "${{ github.event.pull_request }}" ]; then
            IMAGE_TAG="pr-${{ github.event.number }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="main"
          elif [ "${{ github.ref }}" = "refs/tags/${{ github.ref }}" ]; then
            IMAGE_TAG="latest"
          fi

          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
