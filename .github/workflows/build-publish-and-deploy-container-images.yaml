name: 'Build, Publish, and Deploy container images'

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  build-and-publish-container-images:
    name: 'Build and Publish container images'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to the Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Dependencies
        run: pnpm install

      - name: Get API environment files
        run: |
          curl -H "Authorization: token ${TOKEN}" https://raw.githubusercontent.com/fss-fmi/secrets/main/sugaming/.env.preview > .env
          curl -H "Authorization: token ${TOKEN}" https://raw.githubusercontent.com/fss-fmi/secrets/main/sugaming/apps/sugaming-api/.env.preview > ./apps/sugaming-api/.env
        env:
          TOKEN: ${{ secrets.FSS_FMI_GITHUB_TOKEN }}

      - name: Build images
        run: INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} npx nx run-many --target=container --push

  deploy-container-images:
    name: 'Deploy ${{ matrix.IMAGE_NAME }} container image'
    runs-on: ubuntu-latest

    env:
      PRODUCTION_SSH_HOST: ${{ secrets[matrix.PRODUCTION_SSH_HOST] }}
      PRODUCTION_SSH_USER: ${{ secrets[matrix.PRODUCTION_SSH_USER] }}
      PRODUCTION_SSH_PASSWORD: ${{ secrets[matrix.PRODUCTION_SSH_PASSWORD] }}
      PREVIEW_SSH_HOST: ${{ secrets[matrix.PREVIEW_SSH_HOST] }}
      PREVIEW_SSH_USER: ${{ secrets[matrix.PREVIEW_SSH_USER] }}
      PREVIEW_SSH_PASSWORD: ${{ secrets[matrix.PREVIEW_SSH_PASSWORD] }}

    strategy:
      matrix:
        include:
          - IMAGE_NAME: 'sugaming-api'
            PRODUCTION_SSH_HOST: 'SUGAMING_API_PRODUCTION_SSH_HOST'
            PRODUCTION_SSH_USER: 'SUGAMING_API_PRODUCTION_SSH_USER'
            PRODUCTION_SSH_PASSWORD: 'SUGAMING_API_PRODUCTION_SSH_PASSWORD'
            PREVIEW_SSH_HOST: 'SUGAMING_API_PREVIEW_SSH_HOST'
            PREVIEW_SSH_USER: 'SUGAMING_API_PREVIEW_SSH_USER'
            PREVIEW_SSH_PASSWORD: 'SUGAMING_API_PREVIEW_SSH_PASSWORD'

          - IMAGE_NAME: 'sugaming-discord'
            PRODUCTION_SSH_HOST: 'SUGAMING_DISCORD_PRODUCTION_SSH_HOST'
            PRODUCTION_SSH_USER: 'SUGAMING_DISCORD_PRODUCTION_SSH_USER'
            PRODUCTION_SSH_PASSWORD: 'SUGAMING_DISCORD_PRODUCTION_SSH_PASSWORD'
            PREVIEW_SSH_HOST: 'SUGAMING_DISCORD_PREVIEW_SSH_HOST'
            PREVIEW_SSH_USER: 'SUGAMING_DISCORD_PREVIEW_SSH_USER'
            PREVIEW_SSH_PASSWORD: 'SUGAMING_DISCORD_PREVIEW_SSH_PASSWORD'

    steps:
      - name: Set environment variables
        run: |
          # If the deployment is started by:
          #  - a pull requst -> set the image tag to be "pr-{PR_ID}"
          #  - a push to main -> set the image tag to be "main"
          #  - a push of a version tag -> set the image tag to be "latest"
          if [ -n "${{ github.event.pull_request }}" ]; then
            IMAGE_TAG="pr-${{ github.event.number }}"
            SSH_HOST="${{ env.PREVIEW_SSH_HOST }}"
            SSH_USER="${{ env.PREVIEW_SSH_USER }}"
            SSH_PASSWORD="${{ env.PREVIEW_SSH_PASSWORD }}"
            CONTAINER_NAME="${{ matrix.IMAGE_NAME }}-pr-${{ github.event.number }}"
            CONTAINER_PORT=`expr 4000 + ${{ github.event.number }}`
            ENV_FILE=".env.preview"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="main"
            SSH_HOST="${{ env.PREVIEW_SSH_HOST }}"
            SSH_USER="${{ env.PREVIEW_SSH_USER }}"
            SSH_PASSWORD="${{ env.PREVIEW_SSH_PASSWORD }}"
            CONTAINER_NAME="main"
            CONTAINER_PORT="4000"
            ENV_FILE=".env.preview"
          elif [ "${{ github.ref }}" = "refs/tags/${{ github.ref }}" ]; then
            IMAGE_TAG="latest"
            SSH_HOST="${{ env.PRODUCTION_SSH_HOST }}"
            SSH_USER="${{ env.PRODUCTION_SSH_USER }}"
            SSH_PASSWORD="${{ env.PRODUCTION_SSH_PASSWORD }}"
            CONTAINER_NAME="latest"
            CONTAINER_PORT="3000"
            ENV_FILE=".env.production"
          fi

          echo IMAGE_TAG="$IMAGE_TAG" >> $GITHUB_ENV
          echo SSH_HOST="$SSH_HOST" >> $GITHUB_ENV
          echo SSH_USER="$SSH_USER" >> $GITHUB_ENV
          echo SSH_PASSWORD="$SSH_PASSWORD" >> $GITHUB_ENV
          echo CONTAINER_NAME="$CONTAINER_NAME" >> $GITHUB_ENV
          echo CONTAINER_PORT="$CONTAINER_PORT" >> $GITHUB_ENV
          echo ENV_FILE="$ENV_FILE" >> $GITHUB_ENV

      - name: Deploy container image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: $(echo "${{ env.SSH_PASSWORD }}" | base64 --decode)
          script: |
            # Pull and run the container image
            cd /opt/deployment
            docker pull ghcr.io/fss-fmi/${{ matrix.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker stop ${{ matrix.IMAGE_NAME }} || true
            docker rm ${{ matrix.IMAGE_NAME }} || true
            docker run -d -p ${{ env.CONTAINER_PORT }}:3000 --name ${{ matrix.IMAGE_NAME }} --env-file ${{ env.ENV_FILE }} ghcr.io/fss-fmi/${{ matrix.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
